{"version":3,"sources":["components/Editor.js","components/Previewer.js","App.js","reportWebVitals.js","index.js"],"names":["editor","props","className","id","value","text","onChange","handleChange","Previewer","marked","setOptions","breaks","renderer","Renderer","link","href","title","dangerouslySetInnerHTML","__html","markdown","App","e","setState","target","state","source","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2UAWeA,EARA,SAACC,GACd,OACE,qBAAKC,UAAU,SAAf,SACE,0BAAUC,GAAG,SAASC,MAAOH,EAAMI,KAAMC,SAAUL,EAAMM,kB,wBCoBhDC,G,MAtBG,SAACP,GAEjBQ,IAAOC,WAAW,CAChBC,QAAQ,IAIV,IAAMC,EAAW,IAAIH,IAAOI,SAK5B,OAJAD,EAASE,KAAO,SAAUC,EAAMC,EAAOX,GACrC,MAAM,4BAAN,OAAmCU,EAAnC,aAA4CV,EAA5C,SAIA,qBACEF,GAAG,UACHc,wBAAyB,CACvBC,OAAQT,IAAOR,EAAMkB,SAAU,CAAEP,SAAUA,S,gBCWpCQ,E,kDAvBb,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IAMRM,aAAe,SAACc,GACd,EAAKC,SAAS,CAAEH,SAAUE,EAAEE,OAAOnB,SANnC,EAAKoB,MAAQ,CACXL,SAAUlB,EAAMwB,QAHD,E,0CAWnB,WACE,OACE,sBAAKvB,UAAU,MAAf,UAEE,cAAC,IAAD,IACA,cAAC,EAAD,CAAQG,KAAMqB,KAAKF,MAAML,SAAUZ,aAAcmB,KAAKnB,eACtD,cAAC,EAAD,CAAWY,SAAUO,KAAKF,MAAML,kB,GAlBtBQ,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OC2CdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKd,OA9CQ,wsCAgDfe,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4898d39e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Editor.css';\r\n\r\nconst editor = (props) => {\r\n  return (\r\n    <div className='Editor'>\r\n      <textarea id='editor' value={props.text} onChange={props.handleChange} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default editor;\r\n","import React from 'react';\r\nimport marked from 'marked';\r\nimport './Previewer.css';\r\n\r\nconst Previewer = (props) => {\r\n  // ALLOWS LINE BREAKS WITH RETURN BUTTON\r\n  marked.setOptions({\r\n    breaks: true,\r\n  });\r\n\r\n  // INSERTS target=\"_blank\" INTO HREF TAGS (required for codepen links)\r\n  const renderer = new marked.Renderer();\r\n  renderer.link = function (href, title, text) {\r\n    return `<a target=\"_blank\" href=\"${href}\">${text}</a>`;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      id='preview'\r\n      dangerouslySetInnerHTML={{\r\n        __html: marked(props.markdown, { renderer: renderer }),\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Previewer;\r\n","import './App.css';\nimport { Component } from 'react';\nimport Editor from './components/Editor';\nimport ToolBar from './components/ToolBar';\nimport Previewer from './components/Previewer';\nimport ReactFCCtest from 'react-fcctest';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: props.source,\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({ markdown: e.target.value });\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        {/* <ToolBar /> */}\n        <ReactFCCtest />\n        <Editor text={this.state.markdown} handleChange={this.handleChange} />\n        <Previewer markdown={this.state.markdown} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://www.flaticon.com/svg/vstatic/svg/1011/1011407.svg?token=exp=1617380182~hmac=592541266bbe53175093ce9ec8de0984)\n`;\nReactDOM.render(\n  <React.StrictMode>\n    <App source={placeholder} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}